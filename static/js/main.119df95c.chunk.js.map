{"version":3,"sources":["Context.js","Header.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["scoreContext","createContext","ScoreProvider","children","useState","score","setScore","Provider","value","addScore","sube","Header","useContext","className","Table","playing","setPlaying","userImage","setUserImage","cpuImage","setCpuImage","result","setResult","getCpuImage","cpu","getUserImage","user","startGame","e","a","userSelection","parseInt","target","name","Promise","resolve","reject","pick","intervel","setInterval","Math","floor","random","setTimeout","clearInterval","cpuSelection","winner","disabled","onClick","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.119df95c.chunk.js","sourcesContent":["import React, { useState, createContext } from \"react\";\r\n\r\nexport const scoreContext = createContext();\r\n\r\nexport const ScoreProvider = ({ children }) => {\r\n  const [score, setScore] = useState(0);\r\n\r\n  const addScore = (sube) => {\r\n    if (sube === true) {\r\n      setScore(score + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <scoreContext.Provider value={{ score, addScore }}>\r\n      {children}\r\n    </scoreContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport \"./styles/Header.css\";\r\nimport { scoreContext } from \"./Context\";\r\n\r\nconst Header = () => {\r\n  const { score } = useContext(scoreContext);\r\n  return (\r\n    <>\r\n      <div className=\"header\">\r\n        <div className=\"header-container\">\r\n          <div className=\"header-options\">\r\n            <h2>Piedra</h2>\r\n            <h2>Papel</h2>\r\n            <h2>Tijeras</h2>\r\n          </div>\r\n          <div className=\"header-score\">\r\n            <span>Score</span>\r\n            <h2>{score}</h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useContext } from \"react\";\r\nimport \"./styles/Table.css\";\r\nimport { scoreContext } from \"./Context\";\r\n\r\nconst Table = () => {\r\n  const [playing, setPlaying] = useState(false);\r\n  const [userImage, setUserImage] = useState();\r\n  const [cpuImage, setCpuImage] = useState();\r\n  const [result, setResult] = useState(\"\");\r\n  const { addScore } = useContext(scoreContext);\r\n\r\n  //Se obtiene la eleccion de la cpu\r\n  const launchHousePick = () => {\r\n    return new Promise((resolve, reject) => {\r\n      let pick;\r\n      const intervel = setInterval(() => {\r\n        pick = Math.floor(Math.random() * (4 - 1) + 1);\r\n        getCpuImage(pick);\r\n      }, 100);\r\n      setTimeout(() => {\r\n        clearInterval(intervel);\r\n        resolve(pick);\r\n      }, 2000);\r\n    });\r\n  };\r\n\r\n  //Imagen de la seleccion del Cpu\r\n  const getCpuImage = (cpu) => {\r\n    switch (cpu) {\r\n      case 1:\r\n        setCpuImage(\"rock\");\r\n        break;\r\n      case 2:\r\n        setCpuImage(\"paper\");\r\n        break;\r\n      case 3:\r\n        setCpuImage(\"scissors\");\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  //Imagen de la seleccio del user\r\n\r\n  const getUserImage = (user) => {\r\n    switch (user) {\r\n      case 1:\r\n        setUserImage(\"rock\");\r\n        break;\r\n      case 2:\r\n        setUserImage(\"paper\");\r\n        break;\r\n      case 3:\r\n        setUserImage(\"scissors\");\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  //Comienza el juego\r\n  const startGame = async (e) => {\r\n    const userSelection = parseInt(e.target.name);\r\n    setPlaying(true);\r\n    getUserImage(userSelection);\r\n    const cpuSelection = await launchHousePick();\r\n    winner(userSelection, cpuSelection);\r\n  };\r\n\r\n  const winner = (user, cpu) => {\r\n    if (user === 1 && cpu === 1) {\r\n      setResult(\"Empate\");\r\n    }\r\n    if (user === 1 && cpu === 2) {\r\n      setResult(\"Perdiste\");\r\n    }\r\n    if (user === 1 && cpu === 3) {\r\n      setResult(\"Ganaste\");\r\n      addScore(true);\r\n    }\r\n    if (user === 2 && cpu === 1) {\r\n      setResult(\"Ganaste\");\r\n      addScore(true);\r\n    }\r\n    if (user === 2 && cpu === 2) {\r\n      setResult(\"Empate\");\r\n    }\r\n    if (user === 2 && cpu === 3) {\r\n      setResult(\"Perdiste\");\r\n    }\r\n    if (user === 3 && cpu === 1) {\r\n      setResult(\"Perdiste\");\r\n    }\r\n    if (user === 3 && cpu === 2) {\r\n      setResult(\"Ganaste\");\r\n      addScore(true);\r\n    }\r\n    if (user === 3 && cpu === 3) {\r\n      setResult(\"Empate\");\r\n    }\r\n  };\r\n\r\n  const restartGame = () => {\r\n    setPlaying(false);\r\n    setResult(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"table\">\r\n      {!playing ? (\r\n        <div className=\"table-items\">\r\n          <button className=\"item-game rock\" name=\"1\" onClick={startGame}>\r\n            <img\r\n              name=\"1\"\r\n              src=\"https://leonidasesteban.github.io/rock-paper-scissors-react/images/icon-rock.svg\"\r\n              alt=\"\"\r\n            />\r\n          </button>\r\n          <button className=\"item-game paper\" name=\"2\" onClick={startGame}>\r\n            <img\r\n              name=\"2\"\r\n              src=\"https://leonidasesteban.github.io/rock-paper-scissors-react/images/icon-paper.svg\"\r\n              alt=\"\"\r\n            />\r\n          </button>\r\n          <button className=\"item-game scissors\" name=\"3\" onClick={startGame}>\r\n            <img\r\n              name=\"3\"\r\n              src=\"https://leonidasesteban.github.io/rock-paper-scissors-react/images/icon-scissors.svg\"\r\n              alt=\"\"\r\n            />\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"table-result\">\r\n            <div>\r\n              <p className=\"election\">Tu elegiste</p>\r\n              <button\r\n                disabled={true}\r\n                className={`item-game ${userImage}`}\r\n                onClick={startGame}\r\n              >\r\n                <div>\r\n                  <img\r\n                    src={`https://leonidasesteban.github.io/rock-paper-scissors-react/images/icon-${userImage}.svg`}\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n              </button>\r\n            </div>\r\n            <p className=\"vs\">Vs</p>\r\n            <div>\r\n              <p className=\"election\">La CPU eligio</p>\r\n              <button\r\n                disabled={true}\r\n                className={`item-game ${cpuImage}`}\r\n                onClick={startGame}\r\n              >\r\n                <img\r\n                  src={`https://leonidasesteban.github.io/rock-paper-scissors-react/images/icon-${cpuImage}.svg`}\r\n                  alt=\"\"\r\n                />\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <h2 className=\"result\">{result}</h2>\r\n            <div className=\"restar-button-container\">\r\n              <button onClick={restartGame}>Juega de nuevo</button>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React from \"react\";\nimport \"./styles/Global.css\";\nimport Header from \"./Header\";\nimport Table from \"./Table\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ScoreProvider } from \"./Context\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ScoreProvider>\n      <App />\n    </ScoreProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}